load("~/Desktop/STAGE/bouge_pas_yaw.RData")
bp.params <- MulticoreParam(workers = 5)
library(DropletUtils)
library(scater)
library(ensembldb)
library(AnnotationHub)
library(BiocParallel)
library(tidyverse)
library(patchwork)
library(ggvenn)
library(scds)
library(Seurat)
library(SeuratObject)
#devtools::install_github("keshavmot2/scanalysis")
library(scanalysis)
library(moments)
library(scran)
library(ggplot2)
library(PCAtools)
library(batchelor)
library(bluster)
library(pheatmap)
library(clustree)
library(Cairo)
library(BiocSingular)
library(cowplot)
library(batchelor)
library(dplyr)
library(GO.db)
library(topGO)
library(clusterProfiler)
bp.params <- MulticoreParam(workers = 5)
sample.path_1_ctrl<-"/home/izem/Desktop/STAGE/Izem_Single-cell/muscle_1_ctrl/outs/raw_feature_bc_matrix/"
sce.sing <- read10xCounts(sample.path_1_ctrl, col.names=TRUE, BPPARAM = bp.params)
sample.path_1_ctrl<-"/home/izem/Desktop/STAGE/Izem_Single-cell/muscle_1_ctrl/outs/filtered_feature_bc_matrix/"
sce.sing <- read10xCounts(sample.path_1_ctrl, col.names=TRUE, BPPARAM = bp.params)
sce.sing
detected_genes <- rowSums(counts(sce.pbmc)) > 0
table(detected_genes)
sce.pbmc <- sce.pbmc[detected_genes,]
ah <- AnnotationHub()
ens.mm.98 <- query(ah, c("Homo sapiens", "EnsDb", 98))[[1]]
genes <- rowData(sce.pbmc)$ID
gene_annot <- AnnotationDbi::select(ens.mm.98,
keys = genes,
keytype = "GENEID",
columns = c("GENEID", "SEQNAME"))
colnames(gene_annot)<-c("ID", "Chromosome")
rowData(sce.pbmc) <- merge(rowData(sce.pbmc), gene_annot, by = "ID", sort=FALSE)
rownames(rowData(sce.pbmc)) <- rowData(sce.pbmc)$ID
is.mito <- which(rowData(sce.pbmc)$Chromosome=="MT")
sce.pbmc<- addPerCellQC(sce.pbmc, subsets=list(Mito=is.mito), BPPARAM = bp.params)
#View(as.data.frame(colData(sce.final)[3:4]))
#--------------------------------------------------
#hist(sce.pbmc$detected[which(sce.pbmc$detected<200)],breaks = 100)
#colData(sce.pbmc)$log10_counts<-log10(sce.pbmc$sum+1)
low.lib <- isOutlier(sce.pbmc$sum, type="lower",log = TRUE)
isOutlier(sce.pbmc$detected,log = TRUE ,type = "higher")
table(low.lib)
#------------------------------------------
sce.pbmc <- addPerFeatureQC(sce.pbmc, BPPARAM = bp.params)
rowData(sce.pbmc)
colData(sce.pbmc)$cell_sparsity <- 1 - (colData(sce.pbmc)$detected / nrow(sce.pbmc))
rowData(sce.pbmc)$gene_sparsity <- (100 - rowData(sce.pbmc)$detected) / 100
sparse.cells <- sce.pbmc$cell_sparsity > 0.990
mito.cells <- sce.pbmc$subsets_Mito_percent > 10
min.cells <- 1 - (20 / ncol(sce.pbmc))
sparse.genes <- rowData(sce.pbmc)$gene_sparsity > min.cells
table(sparse.genes)
table(mito.cells)
table(low.lib,sparse.cells)
table(low.lib,mito.cells)
table(sparse.cells)
#sce.pbmc <- cxds_bcds_hybrid(sce.pbmc)
#pour detecter les doublets
#----------------------Removing low Q cells
da_one<-which(sparse.cells==FALSE)
da_two<-which(mito.cells==FALSE)
da_three<-which(low.lib==FALSE)
inter_one<-intersect(da_one,da_two)
final_inter<-intersect(inter_one,da_three)
str(final_inter)
#645 cells
sce.final<-sce.pbmc[,final_inter]
sce.final
logcounts(sce.final)
sce.pbmc <- read10xCounts(sample.path_1_ctrl, col.names=TRUE, BPPARAM = bp.params)
sce.pbmc
detected_genes <- rowSums(counts(sce.pbmc)) > 0
table(detected_genes)
sce.pbmc <- sce.pbmc[detected_genes,]
#-------------------------------------------
ah <- AnnotationHub()
ens.mm.98 <- query(ah, c("Homo sapiens", "EnsDb", 98))[[1]]
genes <- rowData(sce.pbmc)$ID
gene_annot <- AnnotationDbi::select(ens.mm.98,
keys = genes,
keytype = "GENEID",
columns = c("GENEID", "SEQNAME"))
colnames(gene_annot)<-c("ID", "Chromosome")
rowData(sce.pbmc) <- merge(rowData(sce.pbmc), gene_annot, by = "ID", sort=FALSE)
rownames(rowData(sce.pbmc)) <- rowData(sce.pbmc)$ID
#----------------------------
is.mito <- which(rowData(sce.pbmc)$Chromosome=="MT")
sce.pbmc<- addPerCellQC(sce.pbmc, subsets=list(Mito=is.mito), BPPARAM = bp.params)
#View(as.data.frame(colData(sce.final)[3:4]))
#--------------------------------------------------
#hist(sce.pbmc$detected[which(sce.pbmc$detected<200)],breaks = 100)
#colData(sce.pbmc)$log10_counts<-log10(sce.pbmc$sum+1)
low.lib <- isOutlier(sce.pbmc$sum, type="lower",log = TRUE)
isOutlier(sce.pbmc$detected,log = TRUE ,type = "higher")
table(low.lib)
#------------------------------------------
sce.pbmc <- addPerFeatureQC(sce.pbmc, BPPARAM = bp.params)
rowData(sce.pbmc)
colData(sce.pbmc)$cell_sparsity <- 1 - (colData(sce.pbmc)$detected / nrow(sce.pbmc))
rowData(sce.pbmc)$gene_sparsity <- (100 - rowData(sce.pbmc)$detected) / 100
sparse.cells <- sce.pbmc$cell_sparsity > 0.990
mito.cells <- sce.pbmc$subsets_Mito_percent > 10
min.cells <- 1 - (20 / ncol(sce.pbmc))
sparse.genes <- rowData(sce.pbmc)$gene_sparsity > min.cells
table(sparse.genes)
table(mito.cells)
table(low.lib,sparse.cells)
table(low.lib,mito.cells)
table(sparse.cells)
#sce.pbmc <- cxds_bcds_hybrid(sce.pbmc)
#pour detecter les doublets
#----------------------Removing low Q cells
da_one<-which(sparse.cells==FALSE)
da_two<-which(mito.cells==FALSE)
da_three<-which(low.lib==FALSE)
inter_one<-intersect(da_one,da_two)
final_inter<-intersect(inter_one,da_three)
str(final_inter)
#645 cells
sce.final<-sce.pbmc[,final_inter]
sce.final
sce.final
set.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(counts(sce.final), BPPARAM=bp.params) # slow with all cells.
table(clust)
sce.final <- computePooledFactors(counts(sce.final),
clusters = clust,
min.mean = 0.1,
BPPARAM = bp.params)
?computePooledFactors
# Use devtools to install hdf5r and loomR from GitHub
devtools::install_github(repo = "hhoeflin/hdf5r")
install.packages("hdf5r")
# Use devtools to install hdf5r and loomR from GitHub
devtools::install_github(repo = "hhoeflin/hdf5r")
devtools::install_github(repo = "mojaveazure/loomR", ref = "develop")
library(loomR)
install.packages("anndata")
library(anndata)
to_sce<-anndata::read_h5ad('/home/izem/test.h5ad')
to_sce
to_sce.var
to_sce['var']
to_sce$var
to_sce$X
to_sce$X
lista=list()
to_sce$obs
rownames(to_sce$obs)
lista[[1]]=rownames(to_sce$obs)
lista[[2]]=rownames(to_sce$var)
dimnames(to_sce$X)<-lista
dimnames(to_sce$X)
?dimnames
dimnames(counts(sce.final))
rownames(to_sce$X)
str(to_sce$X)
to_sce<-anndata::read_h5ad('/home/izem/test.h5ad')
to_sce
to_sce$X
save=to_sce$X
View(save)
save[450:460,10:20]
save[450:460,1000:1020]
save[450:460,3000:3010]
save[470:480,3000:3010]
save[450:460,3000:3010]
rownames(to_sce$var)[3000:3010]
sce.final
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
sce_janin
set.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(sce_janin) # slow with all cells.
table(clust)
sce_janin <- computePooledFactors(sce_janin,
clusters = clust,
min.mean = 0.1)
deconv.sf <- sizeFactors(sce_janin)
summary(deconv.sf)
sce_janin <- logNormCounts(sce_janin)
sce_janin
logcounts(sce_janin)
counts(sce_janin)
rowData(sce_janin)
logcounts(sce_janin)
rowData(sce_janin)
from_sce=anndata::AnnData(X=t(logcounts(sce_janin)),obs=colData(sce_janin),var =rowData(sce_janin))
from_sce=anndata::AnnData(X=t(logcounts(sce_janin)),obs=as.data.frame(colData(sce_janin)),var =as.data.frame(rowData(sce_janin)))
from_sce
from_sce$X
from_sce$X[450:460,3000:3010]
anndata::write_h5ad(from_sce,"~/complete.h5ad")
anndata::write_h5ad(from_sce,"/home/izem/complete.h5ad")
from_sce$X
ffff=from_sce$X
View(ffff)
hist(rowSums(fff))
hist(rowSums(ffff))
plotRLE(sce_janin, exprs_values = "logcounts")
hist(rowSums(ffff))
View(ffff)
to_sce<-anndata::read_h5ad('/home/izem/test.h5ad')
save=to_sce$X
save[450:460,3000:3010] #en comparant had le subset avec l'anndata de scanpy c'est la mÃªme chose du coup on est bon
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
sce_janin
sizeFactors(sce_janin)
sce_janin
librarySizeFactors(sce_janin)
unname(librarySizeFactors(sce_janin))
hist(unname(librarySizeFactors(sce_janin)))
set.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(sce_janin) # slow with all cells.
table(clust)
sce_janin <- computePooledFactors(sce_janin,
clusters = clust,
min.mean = 0.1)
deconv.sf <- sizeFactors(sce_janin)
hist(sce_janin$sizeFactor)
libsize=unname(librarySizeFactors(sce_janin))
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
sce_janin
libsize=unname(librarySizeFactors(sce_janin))
deconv.sf
plot(libsize, deconv.sf, xlab="Library size factor",
plot(libsize, deconv.sf, xlab="Library size factor",
ylab="Deconvolution size factor", log='xy', pch=16)
from_sce=anndata::AnnData(X=t(logcounts(sce_janin)),obs=as.data.frame(colData(sce_janin)),var =as.data.frame(rowData(sce_janin)))
f
plot(libsize, deconv.sf, xlab="Library size factor",
ylab="Deconvolution size factor", log='xy', pch=16)
colData(sce_janin)
et.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(sce_janin) # slow with all cells.
table(clust)
sce_janin <- computePooledFactors(sce_janin,
clusters = clust,
min.mean = 0.1)
deconv.sf <- sizeFactors(sce_janin)
summary(deconv.sf)
colData(sce_janin)
sce_janin$sizeFactor
colnames(sce_janin)
sce_janin$libsizefactor=libsize
libsize
deconv.sf
colData(sce_janin)$sizeFactor
colData(sce_janin)$sizeFactor
colData(sce_janin)$sizeFactor=colData(sce_janin)$deconvSizeFactor
colData(sce_janin)$sizeFactor=colData(sce_janin)$deconvSizeFactor
colData(sce_janin)
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
sce_janin
libsize=unname(librarySizeFactors(sce_janin))
set.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(sce_janin) # slow with all cells.
table(clust)
sce_janin <- computePooledFactors(sce_janin,
clusters = clust,
min.mean = 0.1)
deconv.sf <- sizeFactors(sce_janin)
summary(deconv.sf)
hist(sce_janin$sizeFactor)
sce_janin <- logNormCounts(sce_janin)
colData(sce_janin)
colnames(colData(sce_janin))
colnames(colData(sce_janin))[5]
colnames(colData(sce_janin))[7]
colnames(colData(sce_janin))[7]<-"deconvSizeFactor"
colData(sce_janin)
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
sce_janin
libsize=unname(librarySizeFactors(sce_janin))
set.seed(457) # clusters with PCA from irlba with approximation
clust <- quickCluster(sce_janin) # slow with all cells.
table(clust)
sce_janin <- computePooledFactors(sce_janin,
clusters = clust,
min.mean = 0.1)
deconv.sf <- sizeFactors(sce_janin)
summary(deconv.sf)
hist(sce_janin$sizeFactor)
sce_janin <- logNormCounts(sce_janin)
plot(libsize, deconv.sf, xlab="Library size factor",
ylab="Deconvolution size factor", log='xy', pch=16)
colnames(colData(sce_janin))[7]<-"deconvSizeFactor"
sce_janin$libSizeFactor=libsize
#back to anndata NOW !
from_sce=anndata::AnnData(X=t(logcounts(sce_janin)),obs=as.data.frame(colData(sce_janin)),var =as.data.frame(rowData(sce_janin)))
from_sce$X[450:460,3000:3010]
anndata::write_h5ad(from_sce,"/home/izem/complete.h5ad")
?AnnData()
library(anndata)
library(anndata)
library(scater)
library(scran)
library(SingleCellExperiment)
library(DropletUtils)
library(scuttle)
setwd("/home/izem/PycharmProjects/Explore/")
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
save=to_sce$X
to_sce
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
to_sce$X
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
to_sce$obs
to_sce$var
dimnames(to_sce)
dimnames(to_sce$X)
remotes::install_github("rstudio/reticulate")
library(reticulate)
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
dimnames(to_sce$X)
library(anndata)
library(scater)
library(scran)
library(SingleCellExperiment)
library(DropletUtils)
library(scuttle)
args <- commandArgs(TRUE)
setwd("/home/izem/PycharmProjects/Explore/")
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
dimnames(to_sce$X)
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
to_sce$X
reticulate::repl_python()
force(pheatmap)
to_sce<-anndata::read_h5ad("/home/izem/PycharmProjects/Explore/test.h5ad")
sce_janin<-SingleCellExperiment(assays=list(counts=t(to_sce$X)),rowData=list(to_sce$var),colData=list(to_sce$obs))
